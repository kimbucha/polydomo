{"version":3,"file":"background.js","mappings":"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","sources":["webpack://frontend/./src/background.js"],"sourcesContent":["console.log('Background script loaded');\n\nchrome.runtime.onInstalled.addListener(() => {\n  console.log('Extension installed/updated');\n});\n\nlet timer = null;\nlet state = {\n  timeLeft: 1500,\n  isRunning: false,\n  isBreak: false,\n  isCompleted: false,\n  currentTask: '',\n  subTasks: [],\n  stats: {\n    focusMinutes: 0,\n    completedPomodoros: 0,\n    currentStreak: 0,\n    dailyStats: {\n      date: new Date().toDateString(),\n      focusMinutes: 0,\n      completedPomodoros: 0,\n      breaks: 0\n    }\n  },\n  settings: {\n    focusDuration: 25,\n    breakDuration: 5,\n    dailyGoal: 8,\n    popupOnComplete: true\n  }\n};\n\n// Add connection handling\nlet ports = new Set();\n\nchrome.runtime.onConnect.addListener(port => {\n  console.log('New connection established');\n  ports.add(port);\n\n  port.onDisconnect.addListener(() => {\n    ports.delete(port);\n  });\n\n  port.onMessage.addListener((msg) => handleMessage(msg, port));\n});\n\nfunction handleMessage(request, port) {\n  console.log('Background received message:', request);\n\n  switch (request.action) {\n    case 'getState':\n      port.postMessage({ type: 'STATE_UPDATE', state });\n      break;\n\n    case 'startTimer':\n      console.log('Starting timer with task:', request.task);\n      const success = startTimer(request.task, request.focusDuration);\n      port.postMessage({ type: 'TIMER_RESPONSE', success });\n      break;\n\n    case 'resetTimer':\n      clearInterval(timer);\n      timer = null;\n      state.isRunning = false;\n      state.isCompleted = false;\n      state.timeLeft = state.settings.focusDuration * 60;\n      updateBadgeAndIcon();\n      broadcastState();\n      saveState();\n      port.postMessage({ type: 'TIMER_RESPONSE', success: true });\n      break;\n\n    case 'startBreak':\n      console.log('Starting break with settings:', request.settings);\n      clearInterval(timer);\n      state.isBreak = true;\n      state.timeLeft = request.settings.breakDuration * 60;\n      state.isRunning = true;\n      state.isCompleted = false;\n      \n      timer = setupTimer();\n      \n      updateBadgeAndIcon();\n      broadcastState();\n      saveState();\n      port.postMessage({ type: 'TIMER_RESPONSE', success: true });\n      break;\n\n    case 'addSubTask':\n      state.subTasks.push(request.task);\n      broadcastState();\n      saveState();\n      port.postMessage({ type: 'TIMER_RESPONSE', success: true });\n      break;\n\n    case 'switchTask':\n      if (request.previousTask) {\n        state.subTasks.push(request.previousTask);\n      }\n      state.currentTask = request.task;\n      broadcastState();\n      saveState();\n      port.postMessage({ type: 'TIMER_RESPONSE', success: true });\n      break;\n\n    case 'updateSettings':\n      state.settings = {\n        ...state.settings,\n        ...request.settings\n      };\n      if (!state.isRunning) {\n        state.timeLeft = state.isBreak ? \n          state.settings.breakDuration * 60 : \n          state.settings.focusDuration * 60;\n      }\n      broadcastState();\n      saveState();\n      port.postMessage({ type: 'TIMER_RESPONSE', success: true });\n      break;\n  }\n}\n\nconst broadcastState = () => {\n  const message = {\n    type: 'STATE_UPDATE',\n    state: {\n      timeLeft: state.timeLeft,\n      isRunning: state.isRunning,\n      isBreak: state.isBreak,\n      isCompleted: state.isCompleted,\n      currentTask: state.currentTask,\n      subTasks: state.subTasks,\n      stats: state.stats\n    }\n  };\n\n  ports.forEach(port => {\n    try {\n      port.postMessage(message);\n    } catch (e) {\n      console.error('Error broadcasting to port:', e);\n    }\n  });\n};\n\n// Keep service worker active\nconst keepAlive = () => {\n  const interval = 20000; // 20 seconds\n  setInterval(() => {\n    chrome.runtime.getPlatformInfo(() => {\n      chrome.runtime.lastError; // Just to check connection\n    });\n  }, interval);\n};\n\n// Initialize immediately\nkeepAlive();\n\n// Load state from storage or use defaults\nchrome.storage.local.get(['timerState'], (result) => {\n  if (result.timerState) {\n    const savedState = result.timerState;\n    const now = Date.now();\n    const timePassed = now - (savedState.lastSaved || now);\n    \n    // If timer was running, adjust timeLeft\n    if (savedState.isRunning) {\n      const secondsPassed = Math.floor(timePassed / 1000);\n      savedState.timeLeft = Math.max(0, savedState.timeLeft - secondsPassed);\n      \n      // If timer would have completed while away\n      if (savedState.timeLeft === 0) {\n        savedState.isRunning = false;\n        savedState.isCompleted = true;\n      }\n    }\n    \n    state = savedState;\n  }\n  \n  // Ensure valid state on reload\n  if (!state.isRunning && !state.isCompleted) {\n    state.timeLeft = state.isBreak ? \n      state.settings.breakDuration * 60 : \n      state.settings.focusDuration * 60;\n    state.isBreak = false;\n  }\n  \n  if (state.isRunning) {\n    timer = setupTimer();\n  }\n  \n  broadcastState();\n});\n\nconst setupTimer = () => {\n  try {\n    if (timer) {\n      clearInterval(timer);\n    }\n    \n    return setInterval(() => {\n      if (state.timeLeft > 0) {\n        state.timeLeft--;\n        updateBadgeAndIcon();\n        broadcastState();\n      } else {\n        handleTimerComplete();\n      }\n    }, 1000);\n  } catch (error) {\n    console.error('Error setting up timer:', error);\n    return null;\n  }\n};\n\nconst startTimer = (task, focusDuration) => {\n  console.log('Background: Starting timer with task:', task);\n  state.subTasks = [];\n  if (state.isRunning) {\n    console.log('Timer already running');\n    return false;\n  }\n  \n  clearInterval(timer);\n  \n  updateIcon();\n  state.currentTask = task;\n  state.timeLeft = state.isBreak ? \n    state.settings.breakDuration * 60 : \n    focusDuration * 60;\n  state.isRunning = true;\n  state.isCompleted = false;\n  \n  updateBadgeAndIcon();\n  timer = setupTimer();\n  \n  return true;\n};\n\nconst updateBadgeAndIcon = () => {\n  try {\n    const minutes = Math.floor(state.timeLeft / 60);\n    const seconds = state.timeLeft % 60;\n    const text = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    \n    chrome.action.setBadgeText({ text }).catch(() => {});\n    chrome.action.setBadgeBackgroundColor({ \n      color: state.isBreak ? '#4CAF50' : '#FF6B6B' \n    }).catch(() => {});\n  } catch (error) {\n    console.log('Error updating badge:', error);\n  }\n};\n\nconst updateIcon = () => {\n  try {\n    const iconPath = state.isRunning ?\n      (state.isBreak ? \n        chrome.runtime.getURL(\"icons/break_active_icon.png\") : \n        chrome.runtime.getURL(\"icons/active_icon128.png\")\n      ) :\n      state.isBreak ? \n        chrome.runtime.getURL(\"icons/break_inactive_icon.png\") : \n        chrome.runtime.getURL(\"icons/inactive_icon128.png\");\n\n    chrome.action.setIcon({ path: iconPath }).catch(err => \n      console.error('Icon update failed:', err)\n    );\n    \n    chrome.action.setBadgeBackgroundColor({ \n      color: state.isBreak ? '#4CAF50' : '#F44336' \n    }).catch(() => {});\n  } catch (error) {\n    console.error('Error updating icon:', error);\n  }\n};\n\nconst handleTimerComplete = () => {\n  clearInterval(timer);\n  state.isRunning = false;\n  state.isCompleted = true;\n  \n  // Update icon to smiling one when timer completes\n  const iconPath = state.isBreak ? \n    chrome.runtime.getURL(\"icons/break_inactive_icon.png\") : \n    chrome.runtime.getURL(\"icons/smile_icon128.png\");\n  \n  chrome.action.setIcon({ path: iconPath }).catch(() => {});\n  \n  if (!state.isBreak) {\n    updateStats();\n    \n    // Create notification\n    chrome.notifications.create({\n      type: 'basic',\n      iconUrl: chrome.runtime.getURL('icons/smile_icon128.png'),\n      title: 'Focus Session Complete!',\n      message: `Great job focusing on \"${state.currentTask}\"!`\n    }).catch(() => {});\n\n    // Show popup if enabled in settings\n    if (state.settings.popupOnComplete) {\n      chrome.windows.getCurrent((window) => {\n        chrome.action.openPopup().catch(() => {});\n      });\n    }\n  } else {\n    // Break completed notification\n    chrome.notifications.create({\n      type: 'basic',\n      iconUrl: chrome.runtime.getURL('icons/icon128.png'),\n      title: 'Break Time Over',\n      message: 'Ready to focus again?'\n    }).catch(() => {});\n  }\n  \n  chrome.action.setBadgeText({ text: '' }).catch(() => {});\n  broadcastState();\n  saveState();\n};\n\n// Stats management\nconst updateStats = () => {\n  const today = new Date().toDateString();\n  \n  if (!state.stats.dailyStats || state.stats.dailyStats.date !== today) {\n    state.stats.dailyStats = {\n      date: today,\n      focusMinutes: 0,\n      completedPomodoros: 0,\n      breaks: 0\n    };\n  }\n  \n  state.stats.dailyStats.focusMinutes += state.settings.focusDuration;\n  state.stats.dailyStats.completedPomodoros++;\n  \n  updateStreak();\n  saveState();\n};\n\nconst updateStreak = () => {\n  const now = new Date();\n  const today = now.toDateString();\n  \n  if (state.stats.lastCompleted === today) {\n    state.stats.currentStreak++;\n  } else if (state.stats.lastCompleted) {\n    const lastDate = new Date(state.stats.lastCompleted);\n    const daysDiff = (now - lastDate) / (1000 * 60 * 60 * 24);\n    state.stats.currentStreak = daysDiff > 1 ? 1 : state.stats.currentStreak + 1;\n  } else {\n    state.stats.currentStreak = 1;\n  }\n  \n  state.stats.lastCompleted = today;\n};\n\n// State persistence\nconst saveState = () => {\n  chrome.storage.local.set({ \n    timerState: {\n      ...state,\n      lastSaved: Date.now()\n    } \n  }).catch(error => {\n    console.error('Error saving state:', error);\n  });\n};\n\n// Register cleanup handlers\nchrome.runtime.onSuspend.addListener(() => {\n  clearInterval(timer);\n  saveState();\n});\n\n"],"names":["console","log","chrome","runtime","onInstalled","addListener","timer","state","timeLeft","isRunning","isBreak","isCompleted","currentTask","subTasks","stats","focusMinutes","completedPomodoros","currentStreak","dailyStats","date","Date","toDateString","breaks","settings","focusDuration","breakDuration","dailyGoal","popupOnComplete","ports","Set","onConnect","port","add","onDisconnect","onMessage","msg","request","action","postMessage","type","task","success","startTimer","clearInterval","updateBadgeAndIcon","broadcastState","saveState","setupTimer","push","previousTask","_objectSpread","handleMessage","message","forEach","e","error","setInterval","getPlatformInfo","lastError","storage","local","get","result","timerState","savedState","now","timePassed","lastSaved","secondsPassed","Math","floor","max","handleTimerComplete","updateIcon","minutes","seconds","text","concat","toString","padStart","setBadgeText","setBadgeBackgroundColor","color","iconPath","getURL","setIcon","path","err","notifications","create","iconUrl","title","updateStats","windows","getCurrent","window","openPopup","today","updateStreak","lastCompleted","daysDiff","set","onSuspend"],"sourceRoot":""}